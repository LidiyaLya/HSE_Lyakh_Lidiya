'''
1.1. Создайте ряд функций для проведения математических вычислений:
 функция вычисления факториала числа (произведение натуральных чисел от 1
до n). Принимает в качестве аргумента число, возвращает его факториал;
'''
def factorial(number):
    from math import factorial
    result = factorial(number)
    return result
number = int(input('Введите число: '))
print(factorial(number))
'''
1.2. поиск наибольшего числа из трёх. Принимает в качестве аргумента кортеж из
трёх чисел, возвращает наибольшее из них;
'''
def search_the_largest(*args):
    a, b, c = args[0, 1, 2]
    if a > b and a > c:
        print(a)
    elif b > a and b > c:
        print(b)
    elif c > a and c > b:
        print(c)
'''
1.3. расчёт площади прямоугольного треугольника. Принимает в качестве аргумента
размер двух катетов треугольника. Возвращает площадь треугольника.
'''
def S(leg_1, leg_2):
    result = (leg_1 + leg_2) / 2
    return result
leg_1 = float (input('Длина первого катета: '))
leg_2 = float (input('Длина второго катета: '))
print(S(leg_1, leg_2))
'''
2.1. Создайте функцию для генерации текста с адресом суда.
Функция должна по шаблону генерировать шапку для процессуальных документов с
реквизитами сторон для отправки.
Пример работы функции:
В арбитражный суд города Москвы
Адрес: 115225, г. Москва, ул. Б. Тульская, 17
Истец: Пупкин Василий Геннадьевич
ИНН 1236182357 ОГРНИП 218431927812733
Адрес: 123534, г. Москва, ул. Водников, 13
Ответчик: ООО “Кооператив Озеро”
ИНН 1231231231 ОГРН 123124129312941
Адрес: 123534, г. Москва, ул. Красивых молдавских партизан, 69
Номер дела А40-123456/2023
Функция должна принимать в качестве аргумента словарь с данными ответчика и
номером дела (ссылка на файл с данными).
● На основании номера дела из списка судов должен быть выбран корректный
суд для отправки. Данные по арбитражным судам есть в указанном выше
файле. Используйте код суда из дела.
● С помощью f-string создайте шаблон для заполнения
● В качестве истца укажите свои данные (данные студента)
● В данные по ответчику подставьте данные, переданные в функцию в качестве
аргумента
● В конце шапки подставьте номер дела
Функция должна возвращать готовую шапку в виде строки.
Создайте ещё одну функцию, которая принимает в себя список словарей с данными
ответчика. Используйте цикл for для генерации всех возможных вариантов данной
шапки с вызовом первой функции внутри тела цикла for и выводом данных. которые
она возвращает в консоль.
'''
def make_court_nominative_case(court_name: str) -> str:
    """

    :param court_name:
    :return:
    """
    words = court_name.split(" ")[2::]
    text = "Арбитражный суд"
    for i in words:
        text += f" {i}"
    return text


def make_a_header(court, plaintiff, respondent):
    text = f"-------------------------------\n" \
           f"В {make_court_nominative_case(court['court_name'])}\n" \
           f"Адрес: {court['court_address']}\n\n" \
           f"" \
           f"Истец: {plaintiff['name']}" \
           f"ИНН {plaintiff['inn']} ОГРНИП {plaintiff['ogrnip']}\n" \
           f"Адрес: {plaintiff['address']}\n\n" \
           f"" \
           f"Ответчик: {respondent['short_name']}”\n" \
           f"ИНН {respondent['inn']} ОГРН {respondent['ogrn']}\n" \
           f"Адрес: {respondent['address']}\n\n" \
           f"" \
           f"Номер дела {respondent['case_number']}\n"
    return text


def task_2():
    plaintiff = {
        "name": "Лях Лидия Ильинична",
        "inn": "2336172465",
        "ogrnip": "66852467892314",
        "address": "107465, г. Москва, ул. Вавилова, д. 17"
    }
    cleaned_respondents = [i for i in respondents if i.get("case_number")]
    for respondent in cleaned_respondents:
        court_code = respondent["case_number"].split("-")[0]
        court = courts[court_code]
        result = make_a_header(court, plaintiff, respondent)
        print(result)